diff --git a/src/ecmult_impl.h b/src/ecmult_impl.h
index c00578b..4538bd7 100644
--- a/src/ecmult_impl.h
+++ b/src/ecmult_impl.h
@@ -30,15 +30,27 @@
 #  endif
 #else
 /* optimal for 128-bit and 256-bit exponents. */
+#ifndef USE_LOW_HEAP
 #define WINDOW_A 5
+#else
+#define WINDOW_A 2
+#endif
 /** larger numbers may result in slightly better performance, at the cost of
     exponentially larger precomputed tables. */
 #ifdef USE_ENDOMORPHISM
 /** Two tables for window size 15: 1.375 MiB. */
+#ifndef USE_LOW_HEAP
 #define WINDOW_G 15
 #else
+#define WINDOW_G 2
+#endif
+#else
 /** One table for window size 16: 1.375 MiB. */
+#ifndef USE_LOW_HEAP
 #define WINDOW_G 16
+#else
+#define WINDOW_G 2
+#endif
 #endif
 #endif
 
diff --git a/src/secp256k1.c b/src/secp256k1.c
index a1e3908..f791cb6 100644
--- a/src/secp256k1.c
+++ b/src/secp256k1.c
@@ -26,10 +26,12 @@
     } \
 } while(0)
 
+
+extern int printf_std(const char *fmt, ...);
+
 static void default_illegal_callback_fn(const char* str, void* data) {
     (void)data;
-    fprintf(stderr, "[libsecp256k1] illegal argument: %s\n", str);
-    abort();
+    printf_std("[libsecp256k1] illegal argument: %s\n", str);
 }
 
 static const secp256k1_callback default_illegal_callback = {
@@ -39,8 +41,7 @@ static const secp256k1_callback default_illegal_callback = {
 
 static void default_error_callback_fn(const char* str, void* data) {
     (void)data;
-    fprintf(stderr, "[libsecp256k1] internal consistency check failed: %s\n", str);
-    abort();
+    printf_std("[libsecp256k1] internal consistency check failed: %s\n", str);
 }
 
 static const secp256k1_callback default_error_callback = {
diff --git a/src/util.h b/src/util.h
index e014750..6f468db 100644
--- a/src/util.h
+++ b/src/util.h
@@ -24,14 +24,17 @@ static SECP256K1_INLINE void secp256k1_callback_call(const secp256k1_callback *
     cb->fn(text, (void*)cb->data);
 }
 
+
+extern int printf_std(const char *fmt, ...);
+
 #ifdef DETERMINISTIC
 #define TEST_FAILURE(msg) do { \
-    fprintf(stderr, "%s\n", msg); \
+    printf_std("%s\n", msg); \
     abort(); \
 } while(0);
 #else
 #define TEST_FAILURE(msg) do { \
-    fprintf(stderr, "%s:%d: %s\n", __FILE__, __LINE__, msg); \
+    printf_std("%s:%d: %s\n", __FILE__, __LINE__, msg); \
     abort(); \
 } while(0)
 #endif
